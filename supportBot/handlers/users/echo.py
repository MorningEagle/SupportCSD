from aiogram import types
from aiogram.dispatcher import FSMContext
from utils.utils import text
from keyboards.inline.support import support_keyboard, support_callback
from keyboards.default.menu import set_button

from loader import dp, bot


# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(text("–†–æ–±–æ—Ç–∞ –¥–µ–∫–∞–Ω–∞—Ç—É"), content_types=['text'], state="*")
async def bot_echo(message: types.Message):
    await message.answer(f'''–î–µ–∫–∞–Ω–∞—Ç –§–ö–ù 

üì© –ü–æ—à—Ç–∞: csd@karazin.ua

‚è∞ –ß–∞—Å–∏ —Ä–æ–±–æ—Ç–∏:
      ‚ñ´Ô∏è –ü–Ω-–ß—Ç (8.30 - 17.00)
      ‚ñ´Ô∏è –ü—Ç (8.30 - 16.00)
      ‚ñ´Ô∏è –ü–µ—Ä–µ—Ä–≤–∞ (12.30 - 13.15)
      ‚ñ´Ô∏è –ü—Ä–∏–π–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ (9.30 - 10.30; 13.15 - 15.00)''')


@dp.message_handler(text("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤"), content_types=['text'], state="*")
async def bot_timetables(message: types.Message):
     with open('supportBot/files/–†–æ–∑–∫–ª–∞–¥_–ø–∞—Ä.jpg', 'rb') as pic:
        await message.answer_photo(pic)


@dp.message_handler(text("–í–∏–∫–ª–∞–¥–∞—á—ñ —ñ–Ω—Ñ–æ"), content_types=['text'], state="*")
async def bot_proffessor(message: types.Message):
    with open('supportBot/files/–í–∏–∫–ª–∞–¥–∞—á—ñ.xlsx', 'rb') as doc:
        await message.answer_document(doc)


@dp.message_handler(text("–ü–∏—Ç–∞–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤"), content_types=['text'], state="*")
async def admin_answer(message: types.Message):
    texte = "–ù–∞–∂–º—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ"
    keyboard = await support_keyboard(messages="one")
    await message.answer(texte, reply_markup=keyboard)

@dp.callback_query_handler(support_callback.filter(messages="one"))
async def send_to_support(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()
    user_id = int(callback_data.get("user_id"))

    await call.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    await state.set_state("wait_for_support_message")
    await state.update_data(second_id=user_id)
   # await call.message.answer(reply_markup=set_button)

@dp.message_handler(state="wait_for_support_message", content_types=types.ContentTypes.ANY)
async def get_support_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    second_id = data.get("second_id")

    await bot.send_message(second_id, 
    f"–í–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞–∂–º—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ")
    keyboard = await support_keyboard(messages="one" ,user_id=message.from_user.id)
    await message.copy_to(second_id, reply_markup=keyboard)
    await message.answer("–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!", reply_markup=set_button)
    await state.reset_state()
    

# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
#@dp.message_handler(state="*", content_types=types.ContentTypes.ANY)
#async def bot_echo_all(message: types.Message, state: FSMContext):
 #   state = await state.get_state()
  #  await message.answer(f"–≠—Ö–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ <code>{state}</code>.\n"
   #                      f"\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
    #                     f"<code>{message}</code>")
